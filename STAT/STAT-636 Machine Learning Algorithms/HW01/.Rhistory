gra3 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
res3 <- 2*x1-24 + 2*mu1*(2*x1+4*y1-12)^-2 + mu1*(x1+3*y1-15)^-2 + mu1*x1^-2
res4 <- 2*y1-12 + 4*mu1*(2*x1+4*y1-12)^-2 + 3*mu1*(x1+3*y1-15)^-2 + mu1*y1^-2
return(c(res3,res4))
}
# Define Hessian
Hessian3 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
Hess33 <- 2-8*mu1*(2*x1+4*y1-12)^-3 -2*mu1*(x1+3*y1-15)^-3 -2*mu1*x1^-3
Hess34 <- -16*mu1*(2*x1+4*y1-12)^-3 -6*mu1*(x1+3*y1-15)^-3
Hess43 <- -16*mu1*(2*x1+4*y1-12)^-3 -6*mu1*(x1+3*y1-15)^-3
Hess44 <- 2-32*mu1*(2*x1+4*y1-12)^-3 -18*mu1*(x1+3*y1-15)^-3 -2*mu1*y1^-3
return(matrix(c(Hess33, Hess34, Hess43, Hess44), nrow = 2))
}
##########
# mu = 1
#########
mu1 <- 1
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
gf2(z1)
# mu = 10
########## The solutionsdiffer across M
mu1 <- 10
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
gf2(z1)
mu1 <- 100
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# Question 1e
################
# Plot solutions
#################
# Penalty solutions
x= c(-70.5,-1.17501,-0.34166)
y= c(34.5,4.0666, 3.720595)
# Barrier solutions
Bx= c(12.9935, 0.973348, 8.33333)
By= c(5.865481, 1.077965, -2.573281)
plot(x,y, col="blue",ylim = c(-2,35), xlim = c(-70,12),
main="Penalty versus Barrier Method",pch=15, cex=1.5)
points(Bx,By, col="red", pch=15)
# Question 1a
# Penalty function:
gf2 <- function(z1){
x1 <- z1[1]
y1 <- z1[2]
return(
x1^2 - 24*x1 +y1^2-12*y1+200
)
}
# Question 1b
# Gradient Function
gra2 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
res1 <- 2*x1-24- 4*mu1*(2*x1+4*y1-12)-2*mu1*(x1+3*y1-15)-2*mu1*x1
res2 <- 2*y1-12-8*mu1*(2*x1+4*y1-12)-6*mu1*(x1+3*y1-15)-2*mu1*y1
return(c(res1,res2))
}
# Hessian Function
Hessian2 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
Hess11 <- 2-8*mu1-2*mu1-2*mu1
Hess12 <- -16*mu1-6*mu1
Hess21 <- -16*mu1-6*mu1
Hess22 <- 2-32*mu1-18*mu1-2*mu1
return(matrix(c(Hess11, Hess12, Hess21, Hess22), nrow = 2))
}
#Let mu = 1
mu1 <- 1
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1 > 0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian2(z1,mu1))%*%gra2(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# mu = 10
mu1 <- 10
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.001
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian2(z1,mu1))%*%gra2(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# mu = 100
mu1 <- 100
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian2(z1,mu1))%*%gra2(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# Question 1c
# Barrier function
gf2 <- function(z1){
x1 <- z1[1]
y1 <- z1[2]
return(
x1^2 - 24*x1 +y1^2-12*y1+200
)
}
# Question 1d
# Gradient
gra3 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
res3 <- 2*x1-24 + 2*mu1*(2*x1+4*y1-12)^-2 + mu1*(x1+3*y1-15)^-2 + mu1*x1^-2
res4 <- 2*y1-12 + 4*mu1*(2*x1+4*y1-12)^-2 + 3*mu1*(x1+3*y1-15)^-2 + mu1*y1^-2
return(c(res3,res4))
}
# Define Hessian
Hessian3 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
Hess33 <- 2-8*mu1*(2*x1+4*y1-12)^-3 -2*mu1*(x1+3*y1-15)^-3 -2*mu1*x1^-3
Hess34 <- -16*mu1*(2*x1+4*y1-12)^-3 -6*mu1*(x1+3*y1-15)^-3
Hess43 <- -16*mu1*(2*x1+4*y1-12)^-3 -6*mu1*(x1+3*y1-15)^-3
Hess44 <- 2-32*mu1*(2*x1+4*y1-12)^-3 -18*mu1*(x1+3*y1-15)^-3 -2*mu1*y1^-3
return(matrix(c(Hess33, Hess34, Hess43, Hess44), nrow = 2))
}
##########
# mu = 1
#########
mu1 <- 1
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
gf2(z1)
# mu = 10
########## The solutionsdiffer across M
mu1 <- 10
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
gf2(z1)
mu1 <- 100
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# Question 1e
################
# Plot solutions
#################
# Penalty solutions
x= c(-70.5,-1.17501,-0.34166)
y= c(34.5,4.0666, 3.720595)
# Barrier solutions
Bx= c(12.9935, 0.973348, 8.33333)
By= c(5.865481, 1.077965, -2.573281)
plot(x,y,ylim = c(-2,35), xlim = c(-70,12),
main="Penalty versus Barrier Method",pch=15, cex=1.5)
points(Bx,By, col="red", pch=15)
# Question 1a
# Penalty function:
gf2 <- function(z1){
x1 <- z1[1]
y1 <- z1[2]
return(
x1^2 - 24*x1 +y1^2-12*y1+200
)
}
# Question 1b
# Gradient Function
gra2 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
res1 <- 2*x1-24- 4*mu1*(2*x1+4*y1-12)-2*mu1*(x1+3*y1-15)-2*mu1*x1
res2 <- 2*y1-12-8*mu1*(2*x1+4*y1-12)-6*mu1*(x1+3*y1-15)-2*mu1*y1
return(c(res1,res2))
}
# Hessian Function
Hessian2 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
Hess11 <- 2-8*mu1-2*mu1-2*mu1
Hess12 <- -16*mu1-6*mu1
Hess21 <- -16*mu1-6*mu1
Hess22 <- 2-32*mu1-18*mu1-2*mu1
return(matrix(c(Hess11, Hess12, Hess21, Hess22), nrow = 2))
}
#Let mu = 1
mu1 <- 1
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1 > 0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian2(z1,mu1))%*%gra2(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# mu = 10
mu1 <- 10
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.001
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian2(z1,mu1))%*%gra2(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# mu = 100
mu1 <- 100
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian2(z1,mu1))%*%gra2(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# Question 1c
# Barrier function
gf2 <- function(z1){
x1 <- z1[1]
y1 <- z1[2]
return(
x1^2 - 24*x1 +y1^2-12*y1+200
)
}
# Question 1d
# Gradient
gra3 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
res3 <- 2*x1-24 + 2*mu1*(2*x1+4*y1-12)^-2 + mu1*(x1+3*y1-15)^-2 + mu1*x1^-2
res4 <- 2*y1-12 + 4*mu1*(2*x1+4*y1-12)^-2 + 3*mu1*(x1+3*y1-15)^-2 + mu1*y1^-2
return(c(res3,res4))
}
# Define Hessian
Hessian3 <- function(z1,mu1){
x1 <- z1[1]
y1 <- z1[2]
Hess33 <- 2-8*mu1*(2*x1+4*y1-12)^-3 -2*mu1*(x1+3*y1-15)^-3 -2*mu1*x1^-3
Hess34 <- -16*mu1*(2*x1+4*y1-12)^-3 -6*mu1*(x1+3*y1-15)^-3
Hess43 <- -16*mu1*(2*x1+4*y1-12)^-3 -6*mu1*(x1+3*y1-15)^-3
Hess44 <- 2-32*mu1*(2*x1+4*y1-12)^-3 -18*mu1*(x1+3*y1-15)^-3 -2*mu1*y1^-3
return(matrix(c(Hess33, Hess34, Hess43, Hess44), nrow = 2))
}
##########
# mu = 1
#########
mu1 <- 1
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
gf2(z1)
# mu = 10
########## The solutionsdiffer across M
mu1 <- 10
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
gf2(z1)
mu1 <- 100
x1 <- 1
y1 <- 1
z1 <- c(x1,y1)
error1 <- 0.01
count1 <- 0
while (error1>0.000001) {
z1hold = z1;
z1<- z1- solve(Hessian3(z1,mu1))%*%gra3(z1,mu1)
error1 <- abs(z1hold-z1)
count1=count1 + 1
x1 <- z1[1]
y1 <- z1[2]
}
# Question 1e
################
# Plot solutions
#################
# Penalty solutions
x= c(-70.5,-1.17501,-0.34166)
y= c(34.5,4.0666, 3.720595)
# Barrier solutions
Bx= c(12.9935, 0.973348, 8.33333)
By= c(5.865481, 1.077965, -2.573281)
plot(x,y,ylim = c(-2,35), xlim = c(-70,12),
main="Error",pch=15, cex=1.5)
points(Bx,By, col="red", pch=15)
load("crx.new.data")
getwd()
setwd("C:\Users\echo4\Class\STAT\STAT-636 Machine Learning Algorithms\HW01")
load("crx.new.data")
load("crx.new.data")
setwd("C:\Users\echo4\Class\STAT\STAT-636 Machine Learning Algorithms\HW01")
setwd("C:\Users\echo4\Class\STAT\STAT-636 Machine Learning Algorithms\HW01")
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW01")
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW01")
load("crx.new.data")
crx.new_data <- read.table("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW01/crx.new.data", quote="\"", comment.char="")
View(crx.new_data)
a <- load("crx.new.data")
View(crx.new_data)
crx.new_data[, c(1, 2, 3)]
View(crx.new_data)
View(crx.new_data)
crx.new_data[, c(36)]
vector <- crx.new_data[, c(36)]
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW01")
a <- load("crx.new.data")
vector <- crx.new_data[, c(36)]
hist(vector)
vector36 <- crx.new_data[, c(36)]
hist(vector)
Column36 <- crx.new_data[, c(36)]
hist(Column36)
mean(Column36)
std(Column36)
mean(Column36)
median(Column36)
sd(Column36)
mean(Column36)
median(Column36)
sd(Column36)
quantile(Column36, c(.25,.75))
ecdf(Column36)
hist(Column36)
ecdf(Column36)
Column36 <- crx.new_data[, c(36)]
mean(Column36)
median(Column36)
sd(Column36)
quantile(Column36, c(.25,.75))
hist(Column36)
ecdf(Column36)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW01")
a <- load("crx.new.data")
Column36 <- crx.new_data[, c(36)]
mean(Column36)
median(Column36)
sd(Column36)
quantile(Column36, c(.25,.75))
hist(Column36)
cdf <- ecdf(Column36)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW01")
a <- load("crx.new.data")
Column36 <- crx.new_data[, c(36)]
mean(Column36)
median(Column36)
sd(Column36)
quantile(Column36, c(.25,.75))
hist(Column36)
cdf <- ecdf(Column36)
plot(cdf)
hist(Column36)
Column36 <- crx.new_data[, c(36)]
mean(Column36)
median(Column36)
sd(Column36)
quantile(Column36, c(.25,.75))
library(tidyverse)
df <- vector36
summary(df$X36)
sd(df$X36)
hist(df$X36)
plot(ecdf(df$X36))
library(tidyverse)
df <- read_table("crx.new.data",col_names = FALSE)
summary(df$X36)
sd(df$X36)
hist(df$X36)
plot(ecdf(df$X36))
library(tidyverse)
df <- read_table("crx.new.data",col_names = FALSE)
summary(df$X36)
sd(df$X36)
hist(df$X36)
plot(ecdf(df$X36))
library(tidyverse)
df <- read_table("crx.new.data",col_names = FALSE)
summary(df$X36)
sd(df$X36)
hist(df$X36)
plot(ecdf(df$X36))
library(tidyverse)
df <- read_table("crx.new.data",col_names = FALSE)
summary(df$X36)
sd(df$X36)
hist(df$X36)
plot(ecdf(df$X36))
library(tidyverse)
df <- read_table("crx.new.data",col_names = FALSE)
summary(df$X36)
sd(df$X36)
hist(df$X36)
plot(ecdf(df$X36))

summary(mylm.full)
smylm1 <- step(mylm.full, direction = "backward", trace = 1)
summary(smylm1)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.full, direction = "forward", trace = 1)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1)
summary(smylm2)
mylm.full <- lm(data =longley)
summary(mylm.full)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = GNP.deflator+GNP+Enemployed+Armed.Forces+Population+Year)
summary(smylm2)
data(longley)
summary(longley)
?longley
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = GNP.deflator+GNP+Enemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.full <- lm(data =longley)
summary(mylm.full)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = GNP.deflator+GNP+Enemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.full <- lm(data = longley)
summary(mylm.full)
smylm1 <- step(mylm.full, direction = "backward", trace = 1)
summary(smylm1)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = GNP.deflator+GNP+Enemployed+Armed.Forces+Population+Year)
summary(smylm2)
View(longley)
View(longley)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = 'GNP.deflator+GNP+Enemployed+Armed.Forces+Population+Year')
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = 'GNP.deflator'+'GNP'+'Enemployed'+'Armed.Forces'+'Population+Year')
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = biggest)
summary(smylm2)
# Load data
data(longley)
summary(longley)
?longley
# Problem 4 a
# Fi t a f u l l Li n e a r model
mylm.full <- lm(data =longley)
summary(mylm.full)
# Subset selection
mylm.full <- lm(data = longley)
summary(mylm.full)
smylm1 <- step(mylm.full, direction = "backward", trace = 1)
summary(smylm1)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = biggest)
summary(smylm2)
View(mylm.null)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = biggest)
summary(smylm2)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = biggest)
~
~
jhnfa sd
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~GNP.deflator+GNP+Unemployed+Armed.Forces+Population+Year)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, list(lower = nullmod, upper = fullmod))
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = list(lower = nullmod, upper = fullmod))
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1)
summary(smylm2)
mylm.null <- lm(data = longley)
min.model = lm(y ~ 1, data=longley)
biggest <- formula(lm(y~.,longley))
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = biggest)
summary(smylm2)
mylm.null <- lm(Employed~1,data = longley)
min.model = lm(y ~ 1, data=longley)
biggest <- formula(lm(y~.,longley))
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = biggest)
summary(smylm2)
mylm.null <- lm(Employed~1,data = longley)
min.model = lm(y ~ 1, data=longley)
biggest <- formula(lm(y~.,longley))
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = biggest)
summary(smylm2)
mylm.null <- lm(Employed ~ 1,data = longley)
min.model = lm(y ~ 1, data=longley)
biggest <- formula(lm(y~.,longley))
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = biggest)
summary(smylm2)
mylm.null <- lm(data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~ GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year)
summary(smylm2)
mylm.null <- lm(Employed ~ 1, data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~ GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year)
summary(smylm2)
mylm.null <- lm(Employed ~ 1, data = longley)
smylm2 <- step(mylm.null, direction = "forward", trace = 1, scope = ~ GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year)
summary(smylm2)
# Regularized regression
library(glmnet)
# No regularization
mylm <- lm(mpg ~ wt + cyl + hp, data = mtcars)
summary(mylm)
# Load data
x <- model.matrix(Employed ~ GNP+Unemployed+Armed.Forces+Year,data = longley)[,-1]
y <- longley$Employed
# Ridge regression
ridge.mod1 <- glmnet(x, y, alpha = 0, lambda = 0.001)
coef(ridge.mod1)
ridge.mod5 <- glmnet(x, y, alpha = 0, lambda = 0.005)
coef(ridge.mod5)
# Lasso regression
lasso.mod1 <- glmnet(x, y, alpha = 1, lambda = 0.001)
coef(lasso.mod1)
lasso.mod5 <- glmnet(x, y, alpha = 1, lambda = 0.005)
coef(lasso.mod5)
mydata <- read.table("SAheart.csv", sep = ',', header=TRUE, row.names=1)
# logistic regression
logis.fit <- glm(chd ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age,
data = mydata, family = binomial)
summary(logis.fit)
# Reduced model
logis.fit2 <- glm(chd ~ tobacco + ldl + famhist + age,
data = mydata, family = binomial)
summary(logis.fit2)
# calculate prob
logis.prob <- predict(logis.fit2, type = "response")
logis.prob[1:10]
# Performance in training data
logis.pred <- logis.prob > .5
table(logis.pred, mydata$chd)
# LDA
library(MASS)
lad.fit <- lda(chd ~ tobacco + ldl + famhist + age,
data = mydata)
lad.fit
lad.pre <- predict(lad.fit, mydata)
table(lad.pre$class, mydata$chd)
mydata <- read.table("SAheart.csv", sep = ',', header=TRUE, row.names=1)
# logistic regression
logis.fit <- glm(chd ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age,
data = mydata, family = binomial)
summary(logis.fit)
# Reduced model
logis.fit2 <- glm(chd ~ tobacco + ldl + famhist + age,
data = mydata, family = binomial)
summary(logis.fit2)
# calculate prob
logis.prob <- predict(logis.fit2, type = "response")
logis.prob[1:10]
# Performance in training data
logis.pred <- logis.prob > .5
table(logis.pred, mydata$chd)
# LDA
library(MASS)
lad.fit <- lda(chd ~ tobacco + ldl + famhist + age,
data = mydata)
lad.fit
lad.pre <- predict(lad.fit, mydata)
table(lad.pre$class, mydata$chd)
mydata <- read.table("SAheart.csv", sep = ',', header=TRUE, row.names=1)
# logistic regression
logis.fit <- glm(chd ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age,
data = mydata, family = binomial)
summary(logis.fit)
# Reduced model
logis.fit2 <- glm(chd ~ tobacco + ldl + famhist + age,
data = mydata, family = binomial)
summary(logis.fit2)
# calculate prob
logis.prob <- predict(logis.fit2, type = "response")
logis.prob[1:10]
# Performance in training data
logis.pred <- logis.prob > .5
table(logis.pred, mydata$chd)
# LDA
library(MASS)
lad.fit <- lda(chd ~ tobacco + ldl + famhist + age,
data = mydata)
lad.fit
lad.pre <- predict(lad.fit, mydata)
table(lad.pre$class, mydata$chd)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("SAheart.csv", sep = ',', header=TRUE, row.names=1)
# logistic regression
logis.fit <- glm(chd ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age,
data = mydata, family = binomial)
summary(logis.fit)
# Reduced model
logis.fit2 <- glm(chd ~ tobacco + ldl + famhist + age,
data = mydata, family = binomial)
summary(logis.fit2)
# calculate prob
logis.prob <- predict(logis.fit2, type = "response")
logis.prob[1:10]
# Performance in training data
logis.pred <- logis.prob > .5
table(logis.pred, mydata$chd)
# LDA
library(MASS)
lad.fit <- lda(chd ~ tobacco + ldl + famhist + age,
data = mydata)
lad.fit
lad.pre <- predict(lad.fit, mydata)
table(lad.pre$class, mydata$chd)
summary(logis.fit)
summary(logis.fit2)
lad.fit <- lda(chd ~ tobacco + ldl + famhist + age,
data = mydata)
lad.fit
lad.fit
lad.pre <- predict(lad.fit, mydata)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("SAheart.csv", sep = ',', header=TRUE, row.names=1)
# logistic regression
logis.fit <- glm(chd ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age,
data = mydata, family = binomial)
summary(logis.fit)
# Reduced model
logis.fit2 <- glm(chd ~ tobacco + ldl + famhist + age,
data = mydata, family = binomial)
summary(logis.fit2)
# calculate prob
logis.prob <- predict(logis.fit2, type = "response")
logis.prob[1:10]
# Performance in training data
logis.pred <- logis.prob > .5
table(logis.pred, mydata$chd)
# LDA
library(MASS)
lad.fit <- lda(chd ~ tobacco + ldl + famhist + age,
data = mydata)
lad.fit
lad.pre <- predict(lad.fit, mydata)
table(lad.pre$class, mydata$chd)
mydata <- read.table("GeneData_first15BT.csv", sep=",", header=TRUE, row.names=1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
mydata <- read.table("GeneData_first15BT.csv", sep=",", header=TRUE, row.names=1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
mydata <- read.table("GeneData_first15BT.csv", sep=",", header=TRUE, row.names=1)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15BT.csv", sep=",", header=TRUE, row.names=1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData.csv", sep=",", header=TRUE, row.names=1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
summary(BTresponse)
summary(BTdata)
View(BTdata)
View(BTdata)
# save file to same directory as data
# Session -> Set Working Directory -> Source File Location
#install.packages("rpart") # only do this once
library(rpart)
?rpart
?rpart.control
mydata <- read.table("GeneData.csv", header=TRUE,
row.names=1, sep=",")
mydatanames <- names(mydata)
dim(mydata)
mydatanames[12400:12646]
mydata$BT
# declare a list of empty strings with length equal to the
# number of rows in the data
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
table(mydata$BT, BTresponse)
first100df <- data.frame(BTresponse, mydata[,1:100])
head(first100df)
myrpart <- rpart(BTresponse ~ ., data=first100df)
names(myrpart)
myrpart
# Draw a classification tree
plot(myrpart)
text(myrpart)
# install.packages("rpart.plot") # only do this once
library(rpart.plot)
# use "extra" option to add rates
prp(myrpart, extra=3)
myrpartPredict <- predict(myrpart, type="class")
myrpartPredict
table(myrpartPredict, BTresponse)
# show importance of variables
myrpart$variable.importance
sum(myrpart$variable.importance)
# Prune an overgrown tree
myrpart.full <- rpart(BTresponse ~ ., data=first100df,
control = rpart.control(minsplit = 2))
prp(myrpart.full, extra=1)
myrpart.pruned <- prune(myrpart.full, cp = 0.1)
prp(myrpart.pruned, extra=1)
# Regression tree
age <- mydata$age
summary(age)
myagedf <- data.frame(age, mydata[,1:100])
myagetree <- rpart(age ~ ., data=myagedf)
myagetree
# Draw the regression tree
plot(myagetree)
text(myagetree)
# A better way
prp(myagetree)
myagetree$variable.importance
# install.packages("randomForest") # Only once
library(randomForest)
?randomForest
myrf <- randomForest(BTresponse ~ ., data=first100df)
myrf
varImpPlot(myrf)
View(myrpart.full)
table(mydata$BT, BTresponse)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15.csv", row.names = 1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
summary(BTdata)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15.csv", row.names = 1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
summary(BTdata)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15.csv", row.names = 1)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15BT.csv", row.names = 1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
summary(BTdata)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15BT.csv", row.names = 1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
mydata <- read.table("GeneData_first15BT.csv", sep=",", header=TRUE, row.names=1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
summary(BTdata)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = mydata, family = binomial)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at +
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at +
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = mydata, family = binomial)
summary(logis.fit)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15BT.csv", sep=",", header=TRUE, row.names=1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
summary(BTdata)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at +
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at +
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = mydata, family = binomial)
summary(logis.fit)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at +
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at +
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = BTdata)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15BT.csv", sep=",", header=TRUE, row.names=1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
summary(BTdata)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at +
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at +
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = BTdata)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at +
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at +
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = BTdata, family = binomial)
summary(logis.fit)
setwd("C:/Users/echo4/Class/STAT/STAT-636 Machine Learning Algorithms/HW04")
mydata <- read.table("GeneData_first15BT.csv", sep=",", header=TRUE, row.names=1)
BTresponse <- character(length(mydata$BT))
BTresponse[grep("B", mydata$BT)] <- "B"
BTresponse[grep("T", mydata$BT)] <- "T"
BTresponse <- as.factor(BTresponse)
BTdata <- data.frame(BTresponse, mydata[,-16])
summary(BTdata)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at +
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at +
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = BTdata, family = binomial)
summary(logis.fit)
summary(BTdata)
View(BTdata)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at +
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at +
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = BTdata)
logis.fit <- glm(BTresponse ~ X1000_at  + X1001_at + X1002_f_at + X1003_s_at + X1004_at +
X1005_at + X1006_at + X1007_s_at + X1008_f_at + X1008_f_at + X1009_at +
X100_g_at + X1010_at + X1011_s_at + X1012_at + X1013_at,
data = BTdata, family = binomial)
summary(logis.fit)
summary(logis.fit)
View(logis.fit)
lad.pre <- predict(logis.fit, BTdata)
lad.pre <- predict(logis.fit, BTdata)
summary(lad.pre)
table(lad.pre$class, BTdata$BTresponse)
lad.pre <- predict(logis.fit, BTdata)
summary(lad.pre)
table(lad.pre$class, BTdata$BTresponse)
lad.pre <- predict(logis.fit, BTdata)
summary(lad.pre)
table(lad.pre, BTdata$BTresponse)
table(lad.pre, BTdata$BTresponse)
summary(lad.pre)
lad.pre
logis.fit <- glm(chd ~ sbp + tobacco + ldl + famhist + obesity + alcohol + age,
data = mydata, family = binomial)
summary(logis.fit)
# Reduced model
logis.fit2 <- glm(chd ~ tobacco + ldl + famhist + age,
data = mydata, family = binomial)
summary(logis.fit2)
# calculate prob
logis.prob <- predict(logis.fit2, type = "response")
logis.prob[1:10]
# Performance in training data
logis.pred <- logis.prob > .5
table(logis.pred, mydata$chd)
# LDA
library(MASS)
lad.fit <- lda(chd ~ tobacco + ldl + famhist + age,
data = mydata)
lad.fit
lad.pre <- predict(lad.fit, mydata)
table(lad.pre$class, mydata$chd)
logis.prob <- predict(logis.fit, type = "response")
table(logis.prob, BTdata$BTresponse)
logis.prob <- predict(logis.fit, type = "response")
logis.prob <- predict(logis.fit, type = "response", BTdata)
table(logis.prob, mydata$BTdata)
logis.prob[1:10]
logis.prob <- predict(logis.fit, type = "response")
logis.prob[1:10]
logis.pred <- logis.prob > .5
table(logis.pred, BTdata$BTresponse)
